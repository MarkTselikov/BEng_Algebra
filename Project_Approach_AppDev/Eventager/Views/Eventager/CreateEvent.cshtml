@model Eventager.Models.Event
@using Eventager.Models

@{
    ViewBag.Title = "CreateEvent";
    var ddlCats = ViewBag.ddlCategory as IEnumerable<Category>;
}

<h2>CreateEvent</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <div class="form-horizontal">
        <h4>Event</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" }, labelText: "Name: ")
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" }, labelText: "Description: ")
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventStart, htmlAttributes: new { @class = "control-label col-md-2" }, labelText: "Event Start")
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EventStart, new { type = "date" })
                @Html.ValidationMessageFor(model => model.EventStart, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventEnd, htmlAttributes: new { @class = "control-label col-md-2" }, labelText: "Event End")
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EventEnd, new { type = "date" })
                @Html.ValidationMessageFor(model => model.EventEnd, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList(
                    name: "CategoryID",
                    selectList: new SelectList(
                        items:ddlCats,
                        dataTextField: "Type",
                        dataValueField: "IDCategory"),
                        htmlAttributes:new { @class="form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BreakTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BreakTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BreakTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "DisplayAllEvents")
</div>
